<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mainWindowView="clr-namespace:RecordifyAppWin.MainWindowView"
        x:Class="RecordifyAppWin.MainWindow"
        Title="MainWindow" ResizeMode="NoResize" Topmost="True" WindowState="Maximized" Cursor="Cross"
        Background="{Binding MainWindowModel.Background, Mode=TwoWay}"
        Foreground="{Binding MainWindowModel.Foreground, Mode=TwoWay}"
        Visibility="{Binding MainWindowModel.SelectionVisibility, Mode=TwoWay}"
        WindowStyle="None" ShowInTaskbar="False" AllowsTransparency="True" BorderThickness="0">
    <Window.DataContext>
        <mainWindowView:MainWindowViewModel/>
    </Window.DataContext>
    <Window.InputBindings>
        <KeyBinding Key="Escape" Command="{Binding SelectionActionCommand}" />
        <MouseBinding MouseAction="RightClick" Command="{Binding SelectionActionCommand}" />
    </Window.InputBindings>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="MouseDown" >
            <i:InvokeCommandAction Command="{Binding MouseDownCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseMove" >
            <i:InvokeCommandAction Command="{Binding MouseMoveCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseUp">
            <i:InvokeCommandAction Command="{Binding MouseUpCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid x:Name="myGrid">
        <Grid.Resources>
            <Style x:Key="RecordButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
                <Setter Property="Visibility" Value="Hidden"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding MainWindowModel.RecordButton.IsVisible}" Value="True">
                        <Setter Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ContextMenuItemStyle">
                <Setter Property="MenuItem.Header" Value="{Binding Text}" />
                <Setter Property="MenuItem.Command" Value="{Binding Command}" />
            </Style>
            <Style x:Key="LassoAnimation" TargetType="Rectangle">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding MainWindowModel.IsSelected}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Name="BeginLassoStoryboard">
                                <Storyboard>
                                    <DoubleAnimation Duration="00:00:02" Storyboard.TargetProperty="StrokeDashOffset" By="1" To="16" RepeatBehavior="Forever" SpeedRatio="3"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="BeginLassoStoryboard" />
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>
        
        <Canvas x:Name="myCanvas" Margin="0" UseLayoutRounding="False" HorizontalAlignment="Left" VerticalAlignment="Top">
            <Rectangle
                Canvas.Top="{Binding Path=MainWindowModel.Topoffset, Mode=Default}"
                Canvas.Left="{Binding Path=MainWindowModel.Leftoffset, Mode=Default}"
                Width="{Binding Path=MainWindowModel.Width, Mode=Default}"
                Height="{Binding Path=MainWindowModel.Height, Mode=Default}"
                Stroke="{Binding Path=MainWindowModel.Stroke, Mode=TwoWay}" 
                StrokeThickness="1.5" StrokeDashArray="10 6" SnapsToDevicePixels="True" Style="{StaticResource LassoAnimation}" />
        </Canvas>
        <Button x:Name="btnCapture"
                Width="{Binding MainWindowModel.RecordButton.Width}"
                Height="{Binding MainWindowModel.RecordButton.Height}"
                Margin="{Binding MainWindowModel.RecordButton.Position}"
                Style="{StaticResource RecordButtonStyle}"
                Command="{Binding SelectionActionCommand}"
                CommandParameter="True"
                HorizontalAlignment="Left" VerticalAlignment="Top"
                Background="Crimson" Foreground="White" BorderBrush="Firebrick" BorderThickness="1"
                UseLayoutRounding="False"
                FontSize="12" FontWeight="Bold" FontFamily="Verdana"
                Cursor="Arrow" Focusable="False"
                TextOptions.TextHintingMode="Animated" TextOptions.TextFormattingMode="Display"
                IsManipulationEnabled="True" IsDefault="True" VerticalContentAlignment="Center">
            <Button.Content>
                <TextBlock TextAlignment="Center">
                    <TextBlock.Text>
                        <MultiBinding StringFormat="Recordify!&#x0a;({0} x {1})">
                            <Binding Path="MainWindowModel.Width" />
                            <Binding Path="MainWindowModel.Height" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </Button.Content>
        </Button>
        <tb:TaskbarIcon IconSource="Resources/icon_grey.ico" ToolTipText="Recordify" x:Name="myTaskbarIcon" x:FieldModifier="public" DoubleClickCommand="{Binding SelectionActionCommand}">
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu ItemsSource="{Binding ContextMenuItems}" ItemContainerStyle="{StaticResource ContextMenuItemStyle}"/>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>
    </Grid>
</Window>
